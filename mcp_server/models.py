# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:48:31+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class BasicAuth(BaseModel):
    password: Optional[str] = None
    user: Optional[str] = None


class Status(Enum):
    UNKNOWN_STATUS = 'UNKNOWN_STATUS'
    DEPRECATED = 'DEPRECATED'
    EXPERIMENTAL = 'EXPERIMENTAL'
    SUPPORTED = 'SUPPORTED'


class CompositeTypeLabelEntry(BaseModel):
    key: Optional[str] = Field(None, description='Key of the label')
    value: Optional[str] = Field(None, description='Value of the label')


class ConfigFile(BaseModel):
    content: Optional[str] = Field(None, description='The contents of the file.')


class DeploymentLabelEntry(BaseModel):
    key: Optional[str] = Field(None, description='Key of the label')
    value: Optional[str] = Field(None, description='Value of the label')


class DeploymentUpdateLabelEntry(BaseModel):
    key: Optional[str] = Field(None, description='Key of the label')
    value: Optional[str] = Field(None, description='Value of the label')


class DeploymentsCancelPreviewRequest(BaseModel):
    fingerprint: Optional[str] = Field(
        None,
        description='Specifies a fingerprint for `cancelPreview()` requests. A fingerprint is a randomly generated value that must be provided in `cancelPreview()` requests to perform optimistic locking. This ensures optimistic concurrency so that the deployment does not have conflicting requests (e.g. if someone attempts to make a new update request while another user attempts to cancel a preview, this would prevent one of the requests). The fingerprint is initially generated by Deployment Manager and changes after every request to modify a deployment. To get the latest fingerprint value, perform a `get()` request on the deployment.',
    )


class DeploymentsStopRequest(BaseModel):
    fingerprint: Optional[str] = Field(
        None,
        description='Specifies a fingerprint for `stop()` requests. A fingerprint is a randomly generated value that must be provided in `stop()` requests to perform optimistic locking. This ensures optimistic concurrency so that the deployment does not have conflicting requests (e.g. if someone attempts to make a new update request while another user attempts to stop an ongoing update request, this would prevent a collision). The fingerprint is initially generated by Deployment Manager and changes after every request to modify a deployment. To get the latest fingerprint value, perform a `get()` request on the deployment.',
    )


class Level(Enum):
    UNKNOWN = 'UNKNOWN'
    INFORMATION = 'INFORMATION'
    WARNING = 'WARNING'
    ERROR = 'ERROR'


class Diagnostic(BaseModel):
    field: Optional[str] = Field(
        None,
        description='JsonPath expression on the resource that if non empty, indicates that this field needs to be extracted as a diagnostic.',
    )
    level: Optional[Level] = Field(None, description='Level to record this diagnostic.')


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class ImportFile(BaseModel):
    content: Optional[str] = Field(None, description='The contents of the file.')
    name: Optional[str] = Field(None, description='The name of the file.')


class Location(Enum):
    UNKNOWN = 'UNKNOWN'
    PATH = 'PATH'
    QUERY = 'QUERY'
    BODY = 'BODY'
    HEADER = 'HEADER'


class InputMapping(BaseModel):
    fieldName: Optional[str] = Field(
        None, description='The name of the field that is going to be injected.'
    )
    location: Optional[Location] = Field(
        None, description='The location where this mapping applies.'
    )
    methodMatch: Optional[str] = Field(
        None, description='Regex to evaluate on method to decide if input applies.'
    )
    value: Optional[str] = Field(
        None, description='A jsonPath expression to select an element.'
    )


class Manifest(BaseModel):
    config: Optional[ConfigFile] = Field(
        None, description='Output only. The YAML configuration for this manifest.'
    )
    expandedConfig: Optional[str] = Field(
        None,
        description='Output only. The fully-expanded configuration file, including any templates and references.',
    )
    id: Optional[str] = None
    imports: Optional[List[ImportFile]] = Field(
        None, description='Output only. The imported files for this manifest.'
    )
    insertTime: Optional[str] = Field(
        None, description='Output only. Creation timestamp in RFC3339 text format.'
    )
    layout: Optional[str] = Field(
        None, description='Output only. The YAML layout for this manifest.'
    )
    manifestSizeBytes: Optional[str] = Field(
        None,
        description='Output only. The computed size of the fully expanded manifest.',
    )
    manifestSizeLimitBytes: Optional[str] = Field(
        None,
        description='Output only. The size limit for expanded manifests in the project.',
    )
    name: Optional[str] = Field(
        None, description='Output only. The name of the manifest.'
    )
    selfLink: Optional[str] = Field(
        None, description='Output only. Self link for the manifest.'
    )


class ManifestsListResponse(BaseModel):
    manifests: Optional[List[Manifest]] = Field(
        None, description='Output only. Manifests contained in this list response.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Output only. A token used to continue a truncated list request.',
    )


class Error1(BaseModel):
    code: Optional[str] = Field(
        None, description='[Output Only] The error type identifier for this error.'
    )
    location: Optional[str] = Field(
        None,
        description='[Output Only] Indicates the field in the request that caused the error. This property is optional.',
    )
    message: Optional[str] = Field(
        None, description='[Output Only] An optional, human-readable error message.'
    )


class Error(BaseModel):
    errors: Optional[List[Error1]] = Field(
        None,
        description='[Output Only] The array of errors encountered while processing this operation.',
    )


class Status1(Enum):
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    DONE = 'DONE'


class Code(Enum):
    DEPRECATED_RESOURCE_USED = 'DEPRECATED_RESOURCE_USED'
    NO_RESULTS_ON_PAGE = 'NO_RESULTS_ON_PAGE'
    UNREACHABLE = 'UNREACHABLE'
    NEXT_HOP_ADDRESS_NOT_ASSIGNED = 'NEXT_HOP_ADDRESS_NOT_ASSIGNED'
    NEXT_HOP_INSTANCE_NOT_FOUND = 'NEXT_HOP_INSTANCE_NOT_FOUND'
    NEXT_HOP_INSTANCE_NOT_ON_NETWORK = 'NEXT_HOP_INSTANCE_NOT_ON_NETWORK'
    NEXT_HOP_CANNOT_IP_FORWARD = 'NEXT_HOP_CANNOT_IP_FORWARD'
    NEXT_HOP_NOT_RUNNING = 'NEXT_HOP_NOT_RUNNING'
    INJECTED_KERNELS_DEPRECATED = 'INJECTED_KERNELS_DEPRECATED'
    REQUIRED_TOS_AGREEMENT = 'REQUIRED_TOS_AGREEMENT'
    DISK_SIZE_LARGER_THAN_IMAGE_SIZE = 'DISK_SIZE_LARGER_THAN_IMAGE_SIZE'
    RESOURCE_NOT_DELETED = 'RESOURCE_NOT_DELETED'
    SINGLE_INSTANCE_PROPERTY_TEMPLATE = 'SINGLE_INSTANCE_PROPERTY_TEMPLATE'
    NOT_CRITICAL_ERROR = 'NOT_CRITICAL_ERROR'
    CLEANUP_FAILED = 'CLEANUP_FAILED'
    FIELD_VALUE_OVERRIDEN = 'FIELD_VALUE_OVERRIDEN'
    RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING = (
        'RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING'
    )
    MISSING_TYPE_DEPENDENCY = 'MISSING_TYPE_DEPENDENCY'
    EXTERNAL_API_WARNING = 'EXTERNAL_API_WARNING'
    SCHEMA_VALIDATION_IGNORED = 'SCHEMA_VALIDATION_IGNORED'
    UNDECLARED_PROPERTIES = 'UNDECLARED_PROPERTIES'
    EXPERIMENTAL_TYPE_USED = 'EXPERIMENTAL_TYPE_USED'
    DEPRECATED_TYPE_USED = 'DEPRECATED_TYPE_USED'
    PARTIAL_SUCCESS = 'PARTIAL_SUCCESS'
    LARGE_DEPLOYMENT_WARNING = 'LARGE_DEPLOYMENT_WARNING'
    NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE = 'NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE'
    INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB = (
        'INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB'
    )


class Datum(BaseModel):
    key: Optional[str] = Field(
        None,
        description='[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).',
    )
    value: Optional[str] = Field(
        None, description='[Output Only] A warning data value corresponding to the key.'
    )


class Warning(BaseModel):
    code: Optional[Code] = Field(
        None,
        description='[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.',
    )
    data: Optional[List[Datum]] = Field(
        None,
        description='[Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } ',
    )
    message: Optional[str] = Field(
        None,
        description='[Output Only] A human-readable description of the warning code.',
    )


class Operation(BaseModel):
    clientOperationId: Optional[str] = Field(
        None,
        description='[Output Only] The value of `requestId` if you provided it in the request. Not present otherwise.',
    )
    creationTimestamp: Optional[str] = Field(
        None, description='[Deprecated] This field is deprecated.'
    )
    description: Optional[str] = Field(
        None,
        description='[Output Only] A textual description of the operation, which is set when the operation is created.',
    )
    endTime: Optional[str] = Field(
        None,
        description='[Output Only] The time that this operation was completed. This value is in RFC3339 text format.',
    )
    error: Optional[Error] = Field(
        None,
        description='[Output Only] If errors are generated during processing of the operation, this field will be populated.',
    )
    httpErrorMessage: Optional[str] = Field(
        None,
        description='[Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.',
    )
    httpErrorStatusCode: Optional[int] = Field(
        None,
        description='[Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.',
    )
    id: Optional[str] = Field(
        None,
        description='[Output Only] The unique identifier for the operation. This identifier is defined by the server.',
    )
    insertTime: Optional[str] = Field(
        None,
        description='[Output Only] The time that this operation was requested. This value is in RFC3339 text format.',
    )
    kind: Optional[str] = Field(
        'compute#operation',
        description='[Output Only] Type of the resource. Always `compute#operation` for Operation resources.',
    )
    name: Optional[str] = Field(
        None, description='[Output Only] Name of the operation.'
    )
    operationGroupId: Optional[str] = Field(
        None,
        description='[Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.',
    )
    operationType: Optional[str] = Field(
        None,
        description='[Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on.',
    )
    progress: Optional[int] = Field(
        None,
        description='[Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.',
    )
    region: Optional[str] = Field(
        None,
        description='[Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.',
    )
    selfLink: Optional[str] = Field(
        None, description='[Output Only] Server-defined URL for the resource.'
    )
    startTime: Optional[str] = Field(
        None,
        description='[Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.',
    )
    status: Optional[Status1] = Field(
        None,
        description='[Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.',
    )
    statusMessage: Optional[str] = Field(
        None,
        description='[Output Only] An optional textual description of the current status of the operation.',
    )
    targetId: Optional[str] = Field(
        None,
        description='[Output Only] The unique target ID, which identifies a specific incarnation of the target resource.',
    )
    targetLink: Optional[str] = Field(
        None,
        description='[Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.',
    )
    user: Optional[str] = Field(
        None,
        description='[Output Only] User who requested the operation, for example: `user@example.com`.',
    )
    warnings: Optional[List[Warning]] = Field(
        None,
        description='[Output Only] If warning messages are generated during processing of the operation, this field will be populated.',
    )
    zone: Optional[str] = Field(
        None,
        description='[Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations.',
    )


class OperationsListResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Output only. A token used to continue a truncated list request.',
    )
    operations: Optional[List[Operation]] = Field(
        None, description='Output only. Operations contained in this list response.'
    )


class PollingOptions(BaseModel):
    diagnostics: Optional[List[Diagnostic]] = Field(
        None,
        description='An array of diagnostics to be collected by Deployment Manager, these diagnostics will be displayed to the user.',
    )
    failCondition: Optional[str] = Field(
        None, description='JsonPath expression that determines if the request failed.'
    )
    finishCondition: Optional[str] = Field(
        None,
        description='JsonPath expression that determines if the request is completed.',
    )
    pollingLink: Optional[str] = Field(
        None,
        description='JsonPath expression that evaluates to string, it indicates where to poll.',
    )
    targetLink: Optional[str] = Field(
        None,
        description='JsonPath expression, after polling is completed, indicates where to fetch the resource.',
    )


class Warning1(BaseModel):
    code: Optional[Code] = Field(
        None,
        description='[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.',
    )
    data: Optional[List[Datum]] = Field(
        None,
        description='[Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } ',
    )
    message: Optional[str] = Field(
        None,
        description='[Output Only] A human-readable description of the warning code.',
    )


class ResourceAccessControl(BaseModel):
    gcpIamPolicy: Optional[str] = Field(
        None, description='The GCP IAM Policy to set on the resource.'
    )


class Error3(BaseModel):
    code: Optional[str] = Field(
        None, description='[Output Only] The error type identifier for this error.'
    )
    location: Optional[str] = Field(
        None,
        description='[Output Only] Indicates the field in the request that caused the error. This property is optional.',
    )
    message: Optional[str] = Field(
        None, description='[Output Only] An optional, human-readable error message.'
    )


class Error2(BaseModel):
    errors: Optional[List[Error3]] = Field(
        None,
        description='[Output Only] The array of errors encountered while processing this operation.',
    )


class Intent(Enum):
    CREATE_OR_ACQUIRE = 'CREATE_OR_ACQUIRE'
    DELETE = 'DELETE'
    ACQUIRE = 'ACQUIRE'
    UPDATE = 'UPDATE'
    ABANDON = 'ABANDON'
    CREATE = 'CREATE'


class State(Enum):
    PENDING = 'PENDING'
    IN_PROGRESS = 'IN_PROGRESS'
    IN_PREVIEW = 'IN_PREVIEW'
    FAILED = 'FAILED'
    ABORTED = 'ABORTED'


class Warning2(BaseModel):
    code: Optional[Code] = Field(
        None,
        description='[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.',
    )
    data: Optional[List[Datum]] = Field(
        None,
        description='[Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } ',
    )
    message: Optional[str] = Field(
        None,
        description='[Output Only] A human-readable description of the warning code.',
    )


class ResourceUpdate(BaseModel):
    accessControl: Optional[ResourceAccessControl] = Field(
        None,
        description='The Access Control Policy to set on this resource after updating the resource itself.',
    )
    error: Optional[Error2] = Field(
        None,
        description='Output only. If errors are generated during update of the resource, this field will be populated.',
    )
    finalProperties: Optional[str] = Field(
        None,
        description='Output only. The expanded properties of the resource with reference values expanded. Returned as serialized YAML.',
    )
    intent: Optional[Intent] = Field(
        None,
        description='Output only. The intent of the resource: `PREVIEW`, `UPDATE`, or `CANCEL`.',
    )
    manifest: Optional[str] = Field(
        None,
        description='Output only. URL of the manifest representing the update configuration of this resource.',
    )
    properties: Optional[str] = Field(
        None,
        description='Output only. The set of updated properties for this resource, before references are expanded. Returned as serialized YAML.',
    )
    state: Optional[State] = Field(
        None, description='Output only. The state of the resource.'
    )
    warnings: Optional[List[Warning2]] = Field(
        None,
        description='Output only. If warning messages are generated during processing of this resource, this field will be populated.',
    )


class ServiceAccount(BaseModel):
    email: Optional[str] = Field(
        None,
        description='The IAM service account email address like test@myproject.iam.gserviceaccount.com',
    )


class TargetConfiguration(BaseModel):
    config: Optional[ConfigFile] = Field(
        None, description='The configuration to use for this deployment.'
    )
    imports: Optional[List[ImportFile]] = Field(
        None,
        description='Specifies any files to import for this configuration. This can be used to import templates or other files. For example, you might import a text file in order to use the file in a template.',
    )


class Interpreter(Enum):
    UNKNOWN_INTERPRETER = 'UNKNOWN_INTERPRETER'
    PYTHON = 'PYTHON'
    JINJA = 'JINJA'


class TemplateContents(BaseModel):
    imports: Optional[List[ImportFile]] = Field(
        None, description='Import files referenced by the main template.'
    )
    interpreter: Optional[Interpreter] = Field(
        None,
        description='Which interpreter (python or jinja) should be used during expansion.',
    )
    mainTemplate: Optional[str] = Field(
        None, description='The filename of the mainTemplate'
    )
    schema_: Optional[str] = Field(
        None, alias='schema', description='The contents of the template schema.'
    )
    template: Optional[str] = Field(
        None, description='The contents of the main template file.'
    )


class TestPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description="The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed.",
    )


class TestPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class TypeInfoSchemaInfo(BaseModel):
    input: Optional[str] = Field(
        None,
        description='The properties that this composite type or base type collection accept as input, represented as a json blob, format is: JSON Schema Draft V4',
    )
    output: Optional[str] = Field(
        None,
        description='The properties that this composite type or base type collection exposes as output, these properties can be used for references, represented as json blob, format is: JSON Schema Draft V4',
    )


class TypeLabelEntry(BaseModel):
    key: Optional[str] = Field(None, description='Key of the label')
    value: Optional[str] = Field(None, description='Value of the label')


class TypeProviderLabelEntry(BaseModel):
    key: Optional[str] = Field(None, description='Key of the label')
    value: Optional[str] = Field(None, description='Value of the label')


class SchemaValidation(Enum):
    UNKNOWN = 'UNKNOWN'
    IGNORE = 'IGNORE'
    IGNORE_WITH_WARNINGS = 'IGNORE_WITH_WARNINGS'
    FAIL = 'FAIL'


class UndeclaredProperties(Enum):
    UNKNOWN = 'UNKNOWN'
    INCLUDE = 'INCLUDE'
    IGNORE = 'IGNORE'
    INCLUDE_WITH_WARNINGS = 'INCLUDE_WITH_WARNINGS'
    IGNORE_WITH_WARNINGS = 'IGNORE_WITH_WARNINGS'
    FAIL = 'FAIL'


class ValidationOptions(BaseModel):
    schemaValidation: Optional[SchemaValidation] = Field(
        None,
        description='Customize how deployment manager will validate the resource against schema errors.',
    )
    undeclaredProperties: Optional[UndeclaredProperties] = Field(
        None,
        description='Specify what to do with extra properties when executing a request.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class CreatePolicy(Enum):
    CREATE_OR_ACQUIRE = 'CREATE_OR_ACQUIRE'
    ACQUIRE = 'ACQUIRE'
    CREATE = 'CREATE'


class DeletePolicy(Enum):
    DELETE = 'DELETE'
    ABANDON = 'ABANDON'


class AsyncOptions(BaseModel):
    methodMatch: Optional[str] = Field(
        None, description='Method regex where this policy will apply.'
    )
    pollingOptions: Optional[PollingOptions] = Field(
        None,
        description='Deployment manager will poll instances for this API resource setting a RUNNING state, and blocking until polling conditions tell whether the resource is completed or failed.',
    )


class AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class CompositeType(BaseModel):
    description: Optional[str] = Field(
        None,
        description='An optional textual description of the resource; provided by the client when the resource is created.',
    )
    id: Optional[str] = None
    insertTime: Optional[str] = Field(
        None, description='Output only. Creation timestamp in RFC3339 text format.'
    )
    labels: Optional[List[CompositeTypeLabelEntry]] = Field(
        None,
        description='Map of labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the composite type, must follow the expression: `[a-z]([-a-z0-9_.]{0,61}[a-z0-9])?`.',
    )
    operation: Optional[Operation] = Field(
        None,
        description='Output only. The Operation that most recently ran, or is currently running, on this composite type.',
    )
    selfLink: Optional[str] = Field(
        None, description='Output only. Server defined URL for the resource.'
    )
    status: Optional[Status] = None
    templateContents: Optional[TemplateContents] = Field(
        None, description='Files for the template type.'
    )


class CompositeTypesListResponse(BaseModel):
    compositeTypes: Optional[List[CompositeType]] = Field(
        None,
        description='Output only. A list of resource composite types supported by Deployment Manager.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='A token used to continue a truncated list request.'
    )


class Credential(BaseModel):
    basicAuth: Optional[BasicAuth] = Field(
        None, description='Basic Auth Credential, only used by TypeProvider.'
    )
    serviceAccount: Optional[ServiceAccount] = Field(
        None, description='Service Account Credential, only used by Deployment.'
    )
    useProjectDefault: Optional[bool] = Field(
        None,
        description='Specify to use the project default credential, only supported by Deployment.',
    )


class DeploymentUpdate(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Output only. An optional user-provided description of the deployment after the current update has been applied.',
    )
    labels: Optional[List[DeploymentUpdateLabelEntry]] = Field(
        None,
        description='Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.',
    )
    manifest: Optional[str] = Field(
        None,
        description='Output only. URL of the manifest representing the update configuration of this deployment.',
    )


class Options(BaseModel):
    asyncOptions: Optional[List[AsyncOptions]] = Field(
        None, description='Options regarding how to thread async requests.'
    )
    inputMappings: Optional[List[InputMapping]] = Field(
        None, description='The mappings that apply for requests.'
    )
    validationOptions: Optional[ValidationOptions] = Field(
        None,
        description='Options for how to validate and process properties on a resource.',
    )
    virtualProperties: Optional[str] = Field(
        None,
        description='Additional properties block described as a jsonSchema, these properties will never be part of the json payload, but they can be consumed by InputMappings, this must be a valid json schema draft-04. The properties specified here will be decouple in a different section. This schema will be merged to the schema validation, and properties here will be extracted From the payload and consumed explicitly by InputMappings. ex: field1: type: string field2: type: number',
    )


class Policy(BaseModel):
    auditConfigs: Optional[List[AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class Resource(BaseModel):
    accessControl: Optional[ResourceAccessControl] = Field(
        None, description='The Access Control Policy set on this resource.'
    )
    finalProperties: Optional[str] = Field(
        None,
        description='Output only. The evaluated properties of the resource with references expanded. Returned as serialized YAML.',
    )
    id: Optional[str] = None
    insertTime: Optional[str] = Field(
        None, description='Output only. Creation timestamp in RFC3339 text format.'
    )
    manifest: Optional[str] = Field(
        None,
        description='Output only. URL of the manifest representing the current configuration of this resource.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The name of the resource as it appears in the YAML config.',
    )
    properties: Optional[str] = Field(
        None,
        description='Output only. The current properties of the resource before any references have been filled in. Returned as serialized YAML.',
    )
    type: Optional[str] = Field(
        None,
        description='Output only. The type of the resource, for example `compute.v1.instance`, or `cloudfunctions.v1beta1.function`.',
    )
    update: Optional[ResourceUpdate] = Field(
        None,
        description='Output only. If Deployment Manager is currently updating or previewing an update to this resource, the updated configuration appears here.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Update timestamp in RFC3339 text format.'
    )
    url: Optional[str] = Field(
        None, description='Output only. The URL of the actual resource.'
    )
    warnings: Optional[List[Warning1]] = Field(
        None,
        description='Output only. If warning messages are generated during processing of this resource, this field will be populated.',
    )


class ResourcesListResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='A token used to continue a truncated list request.'
    )
    resources: Optional[List[Resource]] = Field(
        None, description='Resources contained in this list response.'
    )


class TypeInfo(BaseModel):
    description: Optional[str] = Field(None, description='The description of the type.')
    documentationLink: Optional[str] = Field(
        None,
        description='For swagger 2.0 externalDocs field will be used. For swagger 1.2 this field will be empty.',
    )
    kind: Optional[str] = Field(
        None,
        description='Output only. Type of the output. Always `deploymentManager#TypeInfo` for TypeInfo.',
    )
    name: Optional[str] = Field(
        None, description='The base type or composite type name.'
    )
    schema_: Optional[TypeInfoSchemaInfo] = Field(
        None,
        alias='schema',
        description='For base types with a collection, we return a schema and documentation link For template types, we return only a schema',
    )
    selfLink: Optional[str] = Field(
        None, description='Output only. Self link for the type provider.'
    )
    title: Optional[str] = Field(
        None, description='The title on the API descriptor URL provided.'
    )


class TypeProvidersListTypesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='A token used to continue a truncated list request.'
    )
    types: Optional[List[TypeInfo]] = Field(
        None, description='Output only. A list of resource type info.'
    )


class CollectionOverride(BaseModel):
    collection: Optional[str] = Field(
        None,
        description='The collection that identifies this resource within its service.',
    )
    options: Optional[Options] = Field(
        None, description='The options to apply to this resource-level override'
    )


class Deployment(BaseModel):
    description: Optional[str] = Field(
        None, description='An optional user-provided description of the deployment.'
    )
    fingerprint: Optional[str] = Field(
        None,
        description='Provides a fingerprint to use in requests to modify a deployment, such as `update()`, `stop()`, and `cancelPreview()` requests. A fingerprint is a randomly generated value that must be provided with `update()`, `stop()`, and `cancelPreview()` requests to perform optimistic locking. This ensures optimistic concurrency so that only one request happens at a time. The fingerprint is initially generated by Deployment Manager and changes after every request to modify data. To get the latest fingerprint value, perform a `get()` request to a deployment.',
    )
    id: Optional[str] = None
    insertTime: Optional[str] = Field(
        None, description='Output only. Creation timestamp in RFC3339 text format.'
    )
    labels: Optional[List[DeploymentLabelEntry]] = Field(
        None,
        description='Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.',
    )
    manifest: Optional[str] = Field(
        None,
        description='Output only. URL of the manifest representing the last manifest that was successfully deployed. If no manifest has been successfully deployed, this field will be absent.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.',
    )
    operation: Optional[Operation] = Field(
        None,
        description='Output only. The Operation that most recently ran, or is currently running, on this deployment.',
    )
    selfLink: Optional[str] = Field(
        None, description='Output only. Server defined URL for the resource.'
    )
    target: Optional[TargetConfiguration] = Field(
        None,
        description='[Input Only] The parameters that define your deployment, including the deployment configuration and relevant templates.',
    )
    update: Optional[DeploymentUpdate] = Field(
        None,
        description='Output only. If Deployment Manager is currently updating or previewing an update to this deployment, the updated configuration appears here.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Update timestamp in RFC3339 text format.'
    )


class DeploymentsListResponse(BaseModel):
    deployments: Optional[List[Deployment]] = Field(
        None, description='Output only. The deployments contained in this response.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Output only. A token used to continue a truncated list request.',
    )


class GlobalSetPolicyRequest(BaseModel):
    bindings: Optional[List[Binding]] = Field(
        None,
        description="Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings.",
    )
    etag: Optional[str] = Field(
        None,
        description="Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag.",
    )
    policy: Optional[Policy] = Field(
        None,
        description="REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.",
    )


class TypeProvider(BaseModel):
    collectionOverrides: Optional[List[CollectionOverride]] = Field(
        None, description='Allows resource handling overrides for specific collections'
    )
    credential: Optional[Credential] = Field(
        None, description='Credential used when interacting with this type.'
    )
    customCertificateAuthorityRoots: Optional[List[str]] = Field(
        None,
        description='List of up to 2 custom certificate authority roots to use for TLS authentication when making calls on behalf of this type provider. If set, TLS authentication will exclusively use these roots instead of relying on publicly trusted certificate authorities when validating TLS certificate authenticity. The certificates must be in base64-encoded PEM format. The maximum size of each certificate must not exceed 10KB.',
    )
    description: Optional[str] = Field(
        None,
        description='An optional textual description of the resource; provided by the client when the resource is created.',
    )
    descriptorUrl: Optional[str] = Field(
        None, description='Descriptor Url for the this type provider.'
    )
    id: Optional[str] = Field(
        None,
        description='Output only. Unique identifier for the resource defined by the server.',
    )
    insertTime: Optional[str] = Field(
        None, description='Output only. Creation timestamp in RFC3339 text format.'
    )
    labels: Optional[List[TypeProviderLabelEntry]] = Field(
        None,
        description='Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.',
    )
    operation: Optional[Operation] = Field(
        None,
        description='Output only. The Operation that most recently ran, or is currently running, on this type provider.',
    )
    options: Optional[Options] = Field(
        None,
        description='Options to apply when handling any resources in this service.',
    )
    selfLink: Optional[str] = Field(
        None, description='Output only. Self link for the type provider.'
    )


class TypeProvidersListResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='A token used to continue a truncated list request.'
    )
    typeProviders: Optional[List[TypeProvider]] = Field(
        None,
        description='Output only. A list of resource type providers supported by Deployment Manager.',
    )


class BaseType(BaseModel):
    collectionOverrides: Optional[List[CollectionOverride]] = Field(
        None, description='Allows resource handling overrides for specific collections'
    )
    credential: Optional[Credential] = Field(
        None, description='Credential used when interacting with this type.'
    )
    descriptorUrl: Optional[str] = Field(
        None, description='Descriptor Url for the this type.'
    )
    options: Optional[Options] = Field(
        None,
        description='Options to apply when handling any resources in this service.',
    )


class Type(BaseModel):
    base: Optional[BaseType] = Field(
        None, description='Base Type (configurable service) that backs this Type.'
    )
    description: Optional[str] = Field(
        None,
        description='An optional textual description of the resource; provided by the client when the resource is created.',
    )
    id: Optional[str] = None
    insertTime: Optional[str] = Field(
        None, description='Output only. Creation timestamp in RFC3339 text format.'
    )
    labels: Optional[List[TypeLabelEntry]] = Field(
        None,
        description='Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.',
    )
    name: Optional[str] = Field(None, description='Name of the type.')
    operation: Optional[Operation] = Field(
        None,
        description='Output only. The Operation that most recently ran, or is currently running, on this type.',
    )
    selfLink: Optional[str] = Field(
        None, description='Output only. Server defined URL for the resource.'
    )


class TypesListResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='A token used to continue a truncated list request.'
    )
    types: Optional[List[Type]] = Field(
        None,
        description='Output only. A list of resource types supported by Deployment Manager.',
    )
